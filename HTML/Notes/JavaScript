JavaScript(JS)
->是一门跨平台,面向对象的脚本语言,用来控制网页行为,它能使网页可交互
->JavaScript和Java是完全不同的语言,但是基础语法类似
---------------------------------------------------------------------------------------------------------------------------------------------------------
JavaScript引入方式
1.内部脚本:将JS代码写在HTML页面中
  ->必须将代码写在<script>标签中,可以放置于任何地方,任何数量,但一般放在<body>内容底部

2.外部脚本:将JS代码写在外部JS文件中,然后引入到HTML页面中
---------------------------------------------------------------------------------------------------------------------------------------------------------
书写规范
1.区分大小写
2,语句结尾加分号
3.注释方式和Java一样
4.大括号表示代码块
---------------------------------------------------------------------------------------------------------------------------------------------------------
常用语句
  输出语句
         (window前缀可省略)
  ->使用window.alert()写入警告框
  ->使用document.write()写入HTML输出
  ->使用console.log()写入浏览器控制台
---------------------------------------------------------------------------------------------------------------------------------------------------------
变量
 ->Javascript中用var关键字来声明变量
 ->Javascript是一门若语言,一个变量可以存放不同类型的值(覆盖)
 ->var关键字全局都可访问可重复声明(不建议使用),let关键字只在当前代码块内访问且不能重复声明,const关键字表示声明一个只读常量,不可改变

数据类型:原始类型 和 引用类型
 ->number:数字(整数,小数,NAN)
 ->string
 ->boolean
 ->null
 ->undefined:当声明变量未赋初值时,该变量的默认值是undefined
       可使用typeof(变量名)获取数据类型
---------------------------------------------------------------------------------------------------------------------------------------------------------
运算符
 ->大部分与Java中一致
    ==  和  ===全等于 的区别:
  "=="会检测两侧数据类型是否一样,不一样则进行类型转换再进行比较
  "==="不会进行类型转换直接比较

类型转换:
->其他类型转换为number:
  1.string:按照字符串中的字面值,转为数字.如果字面值为数字("20")则转换为对应number类型,如果不是("abc")则转换为NaN,可使用passeInt来转换
  2.boolean:alert(+false);---->输出结果为0

->其他类型转换为boolean
  1.number:0和NaN会转为false,其他数字都为true
  2.string:空字符串会转为false,其他为true
  3.null:转为false
  4.undefined:转为false
---------------------------------------------------------------------------------------------------------------------------------------------------------
函数
->类似于Java的方法

通过function关键词定义,语法为:
  function  函数名(参数){
          代码
  }

注意:形参不需要类型,返回值也不需要定义类型,直接在函数体内部写return返回即可

调用函数: 函数名(参数)
---------------------------------------------------------------------------------------------------------------------------------------------------------
JavaScript常用对象
1.Array数组对象
   创建: 数据类型 变量名=[元素列表]    var a=[1,2,3]
   访问: arr[索引]=值
   常用方法:
   1.push:往数组中添加元素    arr.push(元素)
   2.splice:删除指定元素     arr.splice(开始元素,结束元素)
注意:JS数组长度类型都可变

2.String字符串对象
   创建:数据类型  变量名=[字符串]      var str="hello"
   常用方法:
   1.charAt()
   2.Index():检索字符串
   3.trim():去除字符串前后两段的空白

3.自定义对象
  var 对象名称={
        属性名称1:属性值1,
        属性名称2:属性值2,
        ...
        函数名称:function(参数){}
        ...
        };

例:
   var person={
        name:"张三",
        age:20,
        eat:function(){
        alert("打王者");
             }
        };
   调用:person.eat
---------------------------------------------------------------------------------------------------------------------------------------------------------
BOM:浏览器对象模型
常用对象:
->Window:浏览器窗口对象
->History:历史记录对象
->Location:地址栏对象

Window
获取对象:直接使用,window.可以省略
常用方法:->alert()  显示有确认按钮的警告框
        ->confirm() 显示带有确认和取消的对话框    注意:该方法返回boolean类型的值
        ->定时器:周期性执行指定操作
             1.setInterval(function(){操作},毫秒值);  按照指定周期来调用函数或计算表达式(循环执行)
             2.setTimeout(function(){操作},毫秒值);   在指定时间后调用函数或计算表达式(执行一次)

History
获取对象:使用window.history获取,window.可省略
常用方法:->back()  加载history列表中的前一个URL
常用方法:->forward()  加载history列表中的下一个URL

Location
获取对象:->使用window.location获取,其中window.可以省略
属性:href()  设置或返回完整的URL(执行此代码可以进入URL对应的网页)
---------------------------------------------------------------------------------------------------------------------------------------------------------
DOM:文档对象模型
浏览器在解析HTML标签的时候会将整个HTML封装成文档对象
常用对象:
->Document:整个文档对象
->Element:元素对象
->Attribute:属性对象
->Text:文本对象
->Comment:注释对象

JavaScript通过DOM将整个HTML封装成标签,通过获取标签的对象来间接对HTML进行操作

获取Element对象:
1.getElementById:根据id返回唯一Element对象
2.getElementsByTagName:根据标签名称返回Element对象数组
3.getElementsByName:根据name属性值返回Element对象数组
4.getElementsByClassName:根据class属性值返回Element对象数组

Element对象的使用:
1.接收element对象的变量名.方法名/属性
   具体请看w3c:https://www.w3school.com.cn/jsref/index.asp
---------------------------------------------------------------------------------------------------------------------------------------------------------
事件监听
->有两种绑定事件的方式
1.通过HTML标签中的事件属性进行绑定
 <input type="button" onclick ='on()'>
 function on(){
 alert("我被点击了");
 }

2.通过DOM元素属性绑定(常用)
<input type="button" id="bin">
document.getElementById("bin").onclick=function(){
alert("我被点击了");
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
正则表达式
概念:正则表达式定义了字符串组成的规则
定义: var reg=/正则表达式/
